// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  avatar     String?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  grupos     UserGrupo[]
  Aluno      Aluno?
  Professor  Professor[]

  @@map("users")
}

model Sistema {
  id     String  @id @default(uuid())
  nome   String  @unique
  grupos Grupo[]
}

model Grupo {
  id        String      @id @default(uuid())
  nome      String
  sistemaId String
  sistema   Sistema     @relation(fields: [sistemaId], references: [id])
  usuarios  UserGrupo[]
}

model UserGrupo {
  userId  Int
  grupoId String
  usuario User   @relation(fields: [userId], references: [id])
  grupo   Grupo  @relation(fields: [grupoId], references: [id])

  @@id([userId, grupoId])
}

model Aluno {
  id             Int            @id @default(autoincrement())
  nome           String
  cpf            BigInt
  userId         Int            @unique
  dataNascimento DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id])
  matricula      Matricula[]
  turmasAlunos   TurmasAlunos[]
}

model Matricula {
  id                  Int                   @id @default(autoincrement())
  numero              Int
  alunoId             Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  aluno               Aluno                 @relation(fields: [alunoId], references: [id])
  inscricoesAnexos    InscricaoAnexo[]
  horasComplementares HorasComplementares[]
  listaPresenca       ListaPresenca[]
  notas               Nota[]
  TurmasAlunos        TurmasAlunos[]
}

model Professor {
  id                    Int                     @id @default(autoincrement())
  nome                  String
  cpf                   BigInt
  userId                Int
  dataNascimento        DateTime
  matricula             Int
  dataContratacao       DateTime
  dataSaida             DateTime
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  user                  User                    @relation(fields: [userId], references: [id])
  professorAnexos       ProfessorAnexo[]
  professorTurmaMateria ProfessorTurmaMateria[]
}

// Definindo o modelo `Curso`
model Curso {
  id                  BigInt          @id @default(autoincrement())
  nome                String
  descricao           String
  cargaHoraria        Int
  horasComplementares Int
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  turmas              Turma[]
  cursosMaterias      CursosMateria[]
}

// Definindo o modelo `Turma`
model Turma {
  id                    Int                     @id @default(autoincrement())
  cursoId               BigInt
  dataInicio            DateTime
  dataConclusao         DateTime
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  curso                 Curso                   @relation(fields: [cursoId], references: [id])
  turmasAlunos          TurmasAlunos[]
  professorTurmaMateria ProfessorTurmaMateria[]
}

// Definindo o modelo `TurmasAlunos`
model TurmasAlunos {
  id          BigInt    @id @default(autoincrement())
  turmaId     Int
  inscricaoId Int
  dataInicio  DateTime
  dataTermino DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  turma       Turma     @relation(fields: [turmaId], references: [id])
  inscricao   Matricula @relation(fields: [inscricaoId], references: [id])
  Aluno       Aluno?    @relation(fields: [alunoId], references: [id])
  alunoId     Int?
}


// Definindo o modelo `Materia`
model Materia {
  id                    BigInt                  @id @default(autoincrement())
  nome                  String
  descricao             String
  cargaHoraria          Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  cursosMaterias        CursosMateria[]
  professorTurmaMateria ProfessorTurmaMateria[]
}

// Definindo o modelo `CursosMateria`
model CursosMateria {
  id        BigInt   @id @default(autoincrement())
  cursoId   BigInt
  materiaId BigInt
  periodo   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  curso     Curso    @relation(fields: [cursoId], references: [id])
  materia   Materia  @relation(fields: [materiaId], references: [id])
}

// Definindo o modelo `InscricaoAnexo`
model InscricaoAnexo {
  id          Int       @id @default(autoincrement())
  inscricaoId Int
  nome        String
  tipo        String
  extensao    String
  caminhoUrl  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inscricao   Matricula @relation(fields: [inscricaoId], references: [id])
}

// Definindo o modelo `Professor`

// Definindo o modelo `ProfessorAnexo`
model ProfessorAnexo {
  id          BigInt    @id @default(autoincrement())
  professorId Int
  nome        String
  tipo        String
  extensao    String
  caminhoUrl  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  professor   Professor @relation(fields: [professorId], references: [id])
}

// Definindo o modelo `ListaPresenca`
model ListaPresenca {
  id             BigInt                @id @default(autoincrement())
  turmaMateriaId BigInt
  matriculaId    Int
  presenca       Boolean
  data           DateTime
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  matricula      Matricula             @relation(fields: [matriculaId], references: [id])
  turmaMateria   ProfessorTurmaMateria @relation(fields: [turmaMateriaId], references: [id])
}

// Definindo o modelo `ProfessorTurmaMateria`
model ProfessorTurmaMateria {
  id            BigInt          @id @default(autoincrement())
  materiaId     BigInt
  turmaId       Int
  professorId   Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  materia       Materia         @relation(fields: [materiaId], references: [id])
  turma         Turma           @relation(fields: [turmaId], references: [id])
  professor     Professor       @relation(fields: [professorId], references: [id])
  ListaPresenca ListaPresenca[]
  Nota          Nota[]
}

// Definindo o modelo `Nota`
model Nota {
  id             BigInt                @id @default(autoincrement())
  matriculaId    Int
  periodo        Int
  p1             Int
  p2             Int
  final          Int
  turmaMateriaId BigInt
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  matricula      Matricula             @relation(fields: [matriculaId], references: [id])
  turmaMateria   ProfessorTurmaMateria @relation(fields: [turmaMateriaId], references: [id])
}

// Definindo o modelo `HorasComplementares`
model HorasComplementares {
  id          BigInt    @id @default(autoincrement())
  titulo      String
  descricao   String
  matriculaId Int
  periodo     Int
  nomeArquivo String
  extArquivo  String
  urlArquivo  String
  horas       Int
  tipo        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  matricula   Matricula @relation(fields: [matriculaId], references: [id])
}
